0*0.604+(1*0.302)+(2*0.075)+(3*0.019)
load("C:/Users/alexb/Downloads/l5/l5/Rpackages/ProtExp/data/twin.RData")
View(twin_dia)
?source
?dplyr
wch_r.source_master_only <- read.csv("C:/Users/alexb/Downloads/wch_r-source_master_only/wch_r-source_master_only.csv")
View(wch_r.source_master_only)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
df <- wch_r.source_master_only
df$truck_factor <- NA
df$author %>% as.factor()
df$author <- as.factor(df$author)
levels(df$author)
df %>% df$author
df %>% group_by(df$author)
table(df$author)
df %>% count(df$author)
df %>% summarise(df$author)
df %>% sum(df$author)
df %>% nrow(df$author)
nrow(df$author)
df %>% nrow()
df %>% (count(df_author)/nrow())
df %>% (count(df$author)/nrow())
n<- nrow(df)
df %>% count(df$author) %>% /n
df %>% count(df$author)/n %>%
df %>% count(df$author)/n
rm(list-ls)
rm(list=ls()
rm(list=ls())
rm(list=ls())
?paste0
version
updateR()
install.packages("installr")
library(installr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("readr")
install.packages("rticles")
library(tidyverse)
library(ggplot2)
library(readr)
library(rticles)
library(tidyverse)
install.packages("colorspace")
library(tidyverse)
library(colorspace)
knitr::opts_chunk$set(echo = TRUE)
install.packages("colorspace")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("readr")
install.packages("rticles")
library(colorspace)
library(tidyverse)
install.packages("colorspace")
version
install.packages("stringi")
library(stringi)
knitr::opts_chunk$set(echo = TRUE)
install.packages("colorspace")
install.packages("stringi")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("readr")
install.packages("stringi")
version
knitr::opts_chunk$set(echo = TRUE)
#load country characteristics data
cc_data <- read.csv("countries of the world.csv", dec=",")
#load 2016 world happiness data
wh2016 <- read.csv("happiness2016.csv")
#load 2014 HDI data
hdi2014 <- read.csv("human_development.csv", stringsAsFactors = FALSE)
#gather data understanding
str(cc_data)
summary(cc_data)
head(cc_data)
#gather data understanding
str(hdi2014)
summary(hdi2014)
head(hdi2014)
#gather data understanding
str(wh2016)
summary(wh2016)
head(wh2016)
library(tidyverse)
install.packages("stringi")
knitr::opts_chunk$set(echo = TRUE)
#load country characteristics data
cc_data <- read.csv("countries of the world.csv", dec=",")
#load 2016 world happiness data
wh2016 <- read.csv("happiness2016.csv")
#load 2014 HDI data
hdi2014 <- read.csv("human_development.csv", stringsAsFactors = FALSE)
#gather data understanding
str(cc_data)
summary(cc_data)
head(cc_data)
#gather data understanding
str(hdi2014)
summary(hdi2014)
head(hdi2014)
#gather data understanding
str(wh2016)
summary(wh2016)
head(wh2016)
library(tidyverse)
#Get rid of unnecessary whitespace
cc_data$Country <- str_trim(cc_data$Country) %>% as.factor()
cc_data$Region <- str_trim(cc_data$Region) %>% as.factor()
hdi2014$Country <- str_trim(hdi2014$Country) %>% as.factor()
wh2016$Country <- str_trim(wh2016$Country) %>% as.factor()
wh2016$Region <- str_trim(wh2016$Region) %>% as.factor()
#select only the needed columns
wh2016 <- select(wh2016, Country, Region, Happiness.Score)
#install.packages("StandardizeText")
library(StandardizeText)
#Standardize column using default country names
hdi2014$Country <- standardize.countrynames(hdi2014$Country,suggest="auto", verbose = T)
#Replace mistake manually
hdi2014$Country[which(hdi2014$Country=="CÃ´te d'Ivoire")] <- "Cote d'Ivoire"
#Make sure it worked
hdi2014$Country[which(hdi2014$Country=="CÃ´te d'Ivoire")]
hdi2014$Country[which(hdi2014$Country=="Cote d'Ivoire")]
#Standardize column using default country names
wh2016$Country <- standardize.countrynames(wh2016$Country,suggest="auto", verbose = T)
#Standardize column using default country names
cc_data$Country <- standardize.countrynames(cc_data$Country,suggest="auto")
#make sure the country name standardization worked
non_matches <- anti_join(wh2016[1], hdi2014[2], by = "Country")
non_matches2 <- anti_join(wh2016[1], cc_data[1] , by = "Country")
#print out distinct non-matches
distinct(rbind(non_matches,non_matches2))
#merge datasets to make final dataset
world_df <- inner_join(wh2016, hdi2014, by = "Country")
world_df <- inner_join(world_df, cc_data, by = "Country")
nrow(world_df)
cc_data[which(cc_data$Country=="France"),"Population"]
hdi2014[which(hdi2014$Country=="France"),"Mean.Years.of.Education"]
wh2016[which(wh2016$Country=="France"),"Happiness.Score"]
world_df[which(world_df$Country=="France"),c("Population", "Mean.Years.of.Education", "Happiness.Score")]
str(world_df)
#get rid of duplicate region column, HDI rank column, GNI.per.Capita.Rank.Minus.HDI.Rank column
world_df <-select(world_df, -Region.y)
world_df <- select(world_df, -HDI.Rank)
world_df <- select(world_df, -GNI.per.Capita.Rank.Minus.HDI.Rank)
world_df <- rename(world_df, Region = "Region.x", HDI.Score = "Human.Development.Index..HDI.", Gross.National.Income.per.Capita ="Gross.National.Income..GNI..per.Capita", Area.sq.mi = "Area..sq..mi..",Pop.Density.per.sq.mi =  "Pop..Density..per.sq..mi..",Coast.Area.Ratio= "Coastline..coast.area.ratio.", Infant.Mortality.per.1000.births= "Infant.mortality..per.1000.births.", GDP.per.capita = "GDP....per.capita.", Literacy.percent ="Literacy....", Phones.per.1000.people ="Phones..per.1000.", Arable.percent="Arable....", Crops.percent = "Crops....", Other.Land.Use.percent= "Other....")
world_df$Gross.National.Income.per.Capita <- as.numeric(gsub(",", "", world_df$Gross.National.Income.per.Capita))
anyNA(world_df)
summary(world_df)
#replace Literacy.percent with the median
world_df$Literacy.percent[is.na(world_df$Literacy.percent)] <- median(world_df$Literacy.percent, na.rm = T)
#replace Phones.per.1000 with the median
world_df$Phones.per.1000.people[is.na(world_df$Phones.per.1000.people)] <- median(world_df$Phones.per.1000.people, na.rm = T)
#replace Climate with the median
world_df$Climate[is.na(world_df$Climate)] <- median(world_df$Climate, na.rm = T)
#replace Birthrate with the median
world_df$Birthrate[is.na(world_df$Birthrate)] <- median(world_df$Birthrate, na.rm = T)
#replace Deathrate with the median
world_df$Deathrate[is.na(world_df$Deathrate)] <- median(world_df$Deathrate, na.rm = T)
#make sure it worked
anyNA(world_df)
#create a function that calculates outliers based on zscore and formula above
#function takes in a continuous variable and spits out the z scores
outlier.z <- function(cvar) {
a <- sd(cvar)
b <- mean(cvar)
c <- ((b-cvar)/(a))
c
}
#detect which countries have large z-scores
n <- ncol(world_df)
for (i in 3:n){
p <- world_df[abs(outlier.z(world_df[,i]))>3,"Country"]
print(p)
}
library(ggplot2)
#install.packages("GridExtra")
library(gridExtra)
#install.packages("ggrepel")
library(ggrepel)
attach(world_df)
#make boxplot for GNI per capita that labels outliers
g1 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Gross.National.Income.per.Capita))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Gross.National.Income.per.Capita)) +
geom_boxplot(fill = "#d6bea9") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for population that labels outliers
g2 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Population))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Population)) +
geom_boxplot(fill = "#0066cc") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for land area that labels outliers
g3 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Area.sq.mi))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Area.sq.mi)) +
geom_boxplot(fill = "#1cb2e3") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for population density that labels outliers
g4 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Pop.Density.per.sq.mi))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Pop.Density.per.sq.mi)) +
geom_boxplot(fill = "#54acbe") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for coast area ratio that labels outliers
g5 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Coast.Area.Ratio))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Coast.Area.Ratio)) +
geom_boxplot(fill = "#cbe123") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for net migration that labels outliers
g6 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Net.migration))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Net.migration)) +
geom_boxplot(fill = "#0077dd") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for infant mortality that labels outliers
g7 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Infant.Mortality.per.1000.births))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Infant.Mortality.per.1000.births)) +
geom_boxplot(fill = "#ef14d1") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for GDP Per capita that labels outliers
g8 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(GDP.per.capita))>3, Country, "")) %>%
ggplot(., aes(x = "", y = GDP.per.capita)) +
geom_boxplot(fill = "#12ab1a") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for literacy that labels outliers
g9 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Literacy.percent))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Literacy.percent)) +
geom_boxplot(fill = "#bcde28") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for phones that labels outliers
g10 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Phones.per.1000.people))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Phones.per.1000.people)) +
geom_boxplot(fill = "#9aad3f") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for arable that labels outliers
g11 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Arable.percent))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Arable.percent)) +
geom_boxplot(fill = "#1834af") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for crops that labels outliers
g12 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Crops.percent))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Crops.percent)) +
geom_boxplot(fill = "#fe1568") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for deathrate that labels outliers
g13 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Deathrate))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Deathrate)) +
geom_boxplot(fill = "#b15c16") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for agriculture that labels outliers
g14 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Agriculture))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Agriculture)) +
geom_boxplot(fill = "#ed1478") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
#make boxplot for industry that labels outliers
g15 <- world_df %>%
mutate(outlier = ifelse(abs(outlier.z(Industry))>3, Country, "")) %>%
ggplot(., aes(x = "", y = Industry)) +
geom_boxplot(fill = "#bb0000") +
geom_text_repel(aes(label = outlier), hjust = -0.2)
detach(world_df)
grid.arrange(g1, g2, g3, g4, nrow = 2)
grid.arrange(g5, g6, g7, g8, nrow = 2)
grid.arrange(g9, g10, g11, g12, nrow = 2)
grid.arrange(g13, g14, g15, nrow = 2)
r1 <- ggplot(world_df, aes(Region, Happiness.Score))
#show region names
levels(world_df$Region)
#abbreviate region names to make graph more legible
reg_abbr <- c("Australia and New Zealand" = "Aus&NZ", "Central and Eastern Europe" = "Cen.E Eur","Eastern Asia" = "E. Asia", "Latin America and Caribbean" = "LatCari", "Middle East and Northern Africa" = "MENA", "North America" = "N. Amer.", "Southeastern Asia" = "SE. Asia", "Southern Asia" = "S. Asia", "Sub-Saharan Africa" = "S-S.Africa", "Western Europe" = "W. Eur.")
#plot dotplot to show distribution
r1 + geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.1, fill = "#1995AD") + scale_x_discrete(labels = reg_abbr) + ggtitle("Happiness Scores by Region")
devtools::install_github("rstudio/rmarkdown")
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio/rmarkdown")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(knitr)
install.packages("pdflatex")
